-- VHDL Entity MIPS.MIPS_tb.symbol
--
-- Created:
--          by - kolaman.UNKNOWN (KOLAMAN-PC)
--          at - 09:22:45 17/02/2013
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2011.1 (Build 18)
--


ENTITY MIPS_tb IS
-- Declarations

END MIPS_tb ;

--
-- VHDL Architecture MIPS.MIPS_tb.struct
--
-- Created:
--          by - kolaman.UNKNOWN (KOLAMAN-PC)
--          at - 09:22:45 17/02/2013
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2011.1 (Build 18)
--
LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;

LIBRARY work;

ARCHITECTURE struct OF MIPS_tb IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL ALU_result_out  : STD_LOGIC_VECTOR( 31 DOWNTO 0 );
   SIGNAL Branch_out      : STD_LOGIC;
   SIGNAL Instruction_out : STD_LOGIC_VECTOR( 31 DOWNTO 0 );
   SIGNAL Memwrite_out    : STD_LOGIC;
   SIGNAL PC              : STD_LOGIC_VECTOR( 9 DOWNTO 0 );
   SIGNAL Regwrite_out    : STD_LOGIC;
   SIGNAL Zero_out        : STD_LOGIC;
   SIGNAL clock           : STD_LOGIC;
   SIGNAL read_data_1_out : STD_LOGIC_VECTOR( 31 DOWNTO 0 );
   SIGNAL read_data_2_out : STD_LOGIC_VECTOR( 31 DOWNTO 0 );
   SIGNAL reset           : STD_LOGIC;
   SIGNAL write_data_out  : STD_LOGIC_VECTOR( 31 DOWNTO 0 );

	SIGNAL SW					:	STD_LOGIC_VECTOR(7 DOWNTO 0);
	SIGNAL HEX0					:	STD_LOGIC_VECTOR(6 DOWNTO 0);
	SIGNAL HEX1					:	STD_LOGIC_VECTOR(6 DOWNTO 0);
	SIGNAL HEX2					:	STD_LOGIC_VECTOR(6 DOWNTO 0);
	SIGNAL HEX3					:	STD_LOGIC_VECTOR(6 DOWNTO 0);
	SIGNAL HEX4					:	STD_LOGIC_VECTOR(6 DOWNTO 0);
	SIGNAL HEX5					:	STD_LOGIC_VECTOR(6 DOWNTO 0);
	SIGNAL LEDR					:	STD_LOGIC_VECTOR(7 DOWNTO 0);
	

   -- Component Declaration
   	COMPONENT MCU IS
	GENERIC(MemWidth 	: INTEGER := 10;
			SIM 	  : boolean :=FALSE;
			ControlBusSize: integer := 2;
			AddrBusSize	: integer := 32;
			DataBusSize	: integer := 32
			);
	PORT( 	reset, PIN_AF14				: IN 	STD_LOGIC; --pin af14 is clock input
			SW						: IN 	STD_LOGIC_VECTOR(7 DOWNTO 0);
			HEX0						: OUT	STD_LOGIC_VECTOR(6 DOWNTO 0);
			HEX1						: OUT	STD_LOGIC_VECTOR(6 DOWNTO 0);
			HEX2						: OUT	STD_LOGIC_VECTOR(6 DOWNTO 0);
			HEX3						: OUT	STD_LOGIC_VECTOR(6 DOWNTO 0);
			HEX4						: OUT	STD_LOGIC_VECTOR(6 DOWNTO 0);
			HEX5						: OUT	STD_LOGIC_VECTOR(6 DOWNTO 0);
			LEDR						: OUT	STD_LOGIC_VECTOR(7 DOWNTO 0);
		-- Output important signals to pins for easy display in Simulator
		PC								: OUT  STD_LOGIC_VECTOR( 9 DOWNTO 0 );
		ALU_result_out, read_data_1_out, read_data_2_out, write_data_out,	
     	Instruction_out					: OUT 	STD_LOGIC_VECTOR( 31 DOWNTO 0 );
		Branch_out, Zero_out, Memwrite_out, 
		Regwrite_out					: OUT 	STD_LOGIC;
		Next_PC_out          			: OUT STD_LOGIC_VECTOR (7			     DOWNTO 0);
		Ainput_out, Binput_out			: OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
		pll_clock_out					:OUT STD_LOGIC		);
		
END Component MCU;

Component MIPS_tester IS
   PORT( 
      ALU_result_out  : IN     STD_LOGIC_VECTOR ( 31 DOWNTO 0 );
      Branch_out      : IN     STD_LOGIC;
      Instruction_out : IN     STD_LOGIC_VECTOR ( 31 DOWNTO 0 );
      Memwrite_out    : IN     STD_LOGIC;
      PC              : IN     STD_LOGIC_VECTOR ( 9 DOWNTO 0 );
      Regwrite_out    : IN     STD_LOGIC;
      Zero_out        : IN     STD_LOGIC;
      read_data_1_out : IN     STD_LOGIC_VECTOR ( 31 DOWNTO 0 );
      read_data_2_out : IN     STD_LOGIC_VECTOR ( 31 DOWNTO 0 );
      write_data_out  : IN     STD_LOGIC_VECTOR ( 31 DOWNTO 0 );
      clock           : OUT    STD_LOGIC;
      reset           : OUT    STD_LOGIC
   );
   end COMPONENT MIPS_tester;

   -- Optional embedded configurations
   -- pragma synthesis_off
  -- FOR ALL : MCU USE ENTITY work.mcu;
  -- FOR ALL : MIPS_tester USE ENTITY work.mips_tester;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_0 : MCU 
	  GENERIC MAP (
	  MemWidth => 8,
	  SIM => TRUE)
      PORT MAP (
        reset           => reset,
        PIN_AF14           => clock,
		--SW				=> SW,
		--HEX0			=> HEX0,
		--HEX1			=> HEX1,
		--HEX2			=> HEX2,
		--HEX3			=> HEX3,
		--HEX4			=> HEX4,
		HEX5			=> HEX5,
		LEDR			=> LEDR,
        PC              => PC,
        ALU_result_out  => ALU_result_out,
        read_data_1_out => read_data_1_out,
        read_data_2_out => read_data_2_out,
        write_data_out  => write_data_out,
        Instruction_out => Instruction_out,
        Branch_out      => Branch_out,
        Zero_out        => Zero_out,
        Memwrite_out    => Memwrite_out,
        Regwrite_out    => Regwrite_out;
		key_1_n			=> key_1_n;
		key_2_n			=> key_2_n;
		key_3_n			=> key_3_n;
      );
   U_1 : MIPS_tester
      PORT MAP (
         ALU_result_out  => ALU_result_out,
         Branch_out      => Branch_out,
         Instruction_out => Instruction_out,
         Memwrite_out    => Memwrite_out,
         PC              => PC,
         Regwrite_out    => Regwrite_out,
         Zero_out        => Zero_out,
         read_data_1_out => read_data_1_out,
         read_data_2_out => read_data_2_out,
         write_data_out  => write_data_out,
         clock           => clock,
         reset           => reset
      );

END struct;

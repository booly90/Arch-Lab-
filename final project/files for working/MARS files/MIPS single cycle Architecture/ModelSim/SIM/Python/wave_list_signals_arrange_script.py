# -*- coding: utf-8 -*-
"""wave_list_signals_arrange_script.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g2oeXV1Umov07Es7rPPQbeaTqjvhMOcw
"""

def std_logic2hex(wave_list_line):
  for i in range(1,len(wave_list_line)-1):
    if 'X' in wave_list_line[i]:
      wave_list_line[i] = 'X'
    elif 'U' in wave_list_line[i]:
      wave_list_line[i] = 'U'
    else:
      num_bin_size,num_dec = bin2dec(wave_list_line[i])
      num_hex = hex(num_dec)[2:].zfill(num_bin_size//4)
      wave_list_line[i] = f'{num_hex}'
#========================== separate cell =======================================================
def std_logic2dec(wave_list_line):
  for i in range(1,len(wave_list_line)-1):
    if 'X' in wave_list_line[i]:
      wave_list_line[i] = 'X'
    elif 'U' in wave_list_line[i]:
      wave_list_line[i] = 'U'
    else:
      wave_list_line[i] = bin2dec(wave_list_line[i])
      wave_list_line[i] = f'{wave_list_line[i]}'
#========================== separate cell =======================================================
#-------------------------------------------------------------------------------------------------------
#                   bin2dec(num)
#-------------------------------------------------------------------------------------------------------
"""newlist = [output_expression(x) for x in oldlist if conditional(x)]"""

def bin2dec(num):   # num is a binary string 
  
  filtered_num = [x for x in num if (x == '1' or x == '0')]
  num_bin_int_mirror = [int(x) for x in filtered_num[::-1]]
  num_bin_size = len(num_bin_int_mirror)
  num_dec = sum([num_bin_int_mirror[i]*2**i for i in range(num_bin_size)])

  return num_bin_size,num_dec

#========================== separate cell =======================================================
def list_allocate(lst,row_size,col_size,fill_value):
  
  for i in range(row_size):
    temp = [fill_value for i in range(col_size)]
    lst.append(temp)
#========================== separate cell =======================================================

from google.colab import drive
drive.mount('/content/drive')
#--------------------------------------------- Global Program Parameters ----------------------------------
PRE_MODE = 2
STD_LOGIC = 0
DEC = 1
HEX = 2
CLK_HALF_PERIOD_ps = 50000  # 50ns
clk_hlaf_period_cnt = 0
#----------------------------------------------------------------------------------------------------------
# Read the Draft.txt
wavelist_lst_path = "/content/drive/My Drive/Data to process/System_wave_list/wave_list.lst"
wavelist_csv_direct_path = "/content/drive/My Drive/Data to process/System_wave_list/wave_list_direct.csv"
wavelist_csv_transpose_path = "/content/drive/My Drive/Data to process/System_wave_list/wave_list_transpose.csv"

inputfile = open(wavelist_lst_path, "r")
outputfile1 = open(wavelist_csv_direct_path, "w",encoding = 'utf-8-sig')
outputfile2 = open(wavelist_csv_transpose_path, "w",encoding = 'utf-8-sig')


wave_list_matrix = []

for line in inputfile:
  temp3 = []
  temp1 = line.split(' ')
  temp2 = [temp1[i].strip(' ') for i in range(len(temp1))]
  [temp3.append(temp2[i]) for i in range(len(temp2)) if temp2[i] !='']


  if temp3[0] == f'{clk_hlaf_period_cnt}':   
    delta_val = temp3[1]
    temp3.remove(delta_val)  # remove delta cycle column value
    #------------------------------------------------------
    if PRE_MODE == DEC:
      std_logic2dec(temp3)
    elif PRE_MODE == HEX:
      std_logic2hex(temp3)
    #------------------------------------------------------
    half_cycle_line = ','.join(temp3)
    wave_list_matrix.append(half_cycle_line)
    clk_hlaf_period_cnt += CLK_HALF_PERIOD_ps  # promote clock in half period


outputfile1.writelines(wave_list_matrix)



# Close file after finish
inputfile.close()
outputfile1.close()
outputfile2.close()

#========================== separate cell =======================================================
str="Hello, World!"
print("World" in str)

num = '00000000000000000000000000001111}'

txt = '50800}'

x = txt.isdigit()

print("x = ",x)


filtered_num = [x for x in num if (x == '1' or x == '0')]
num_bin_int_mirror = [int(x) for x in filtered_num[::-1]]
num_bin_size = len(num_bin_int_mirror)
num_dec = sum([num_bin_int_mirror[i]*2**i for i in range(num_bin_size)])
# num_hex = hex(num_dec)[2:].zfill(num_bin_size//4)
num_hex = hex(num_dec)[2:]

print(filtered_num)
print(num_bin_int_mirror)
print(len(num_bin_int_mirror))
print(num_dec)
print(num_hex)